---

- name: Setup provider and varables
  set_fact:
    provider: "{{ provider }}"
    declaration_url: "{{ atc_declaration_url|default('') }}"
    declaration_file: "{{ atc_declaration_file }}"
    tenant: "{{ as3_tenant|default('') }}"
    method: "{{ atc_method }}"
    show: "{{ as3_show|default('base') }}"
    show_hash: "{{ as3_showhash|default(false) }}"
    timeout: "{{ atc_timeout }}"
    retries: "{{ atc_retries }}"
    delay: "{{ atc_delay }}"

- name: Download file if url specified
  get_url:
    url: "{{ declaration_url }}"
    dest: "{{ declaration_file }}"
  when: declaration_url != ""

- name: Set Automated Tool Chain service type
  set_fact:
    service: "{{ (lookup('file', declaration_file, errors='strict')| from_json).get('class') }}"
    toolchain_metadata: "{{ lookup('file', 'files/toolchain_metadata.json', errors='strict') }}"

- name: Setup service "{{ service }}" endpoints
  set_fact:
    atcUrl: "{{ toolchain_metadata['components'][service]['endpoints']['configure']['uri'] }}"
    atcCheckUrl: "{{ toolchain_metadata['components'][service]['endpoints']['info']['uri'] }}"

- name: include authentication.yaml
  include_tasks: authentication.yaml

- name: Verify "{{ service }}" service is available, and collect service info
  uri:
    url: "https://{{ provider.server }}:{{ provider.server_port }}{{ atcCheckUrl }}"
    timeout: "{{ timeout }}"
    validate_certs: "{{ provider.validate_certs }}"
    headers:
      X-F5-Auth-Token: "{{ f5_auth_token }}"
  register: status
  until:
    - status is success
    - status.json is defined
  retries: "{{ retries }}"
  delay: "{{ delay }}"

- name: include as3_filtering.yaml
  include_tasks: as3_filtering.yaml
  when:
    - service == "AS3"
    - method in ['POST', 'GET']

- name: include declare.yaml
  include_tasks: declare.yaml

- name: include atc_task_check.yaml
  include_tasks: atc_task_check.yaml
  when:
    - service == "AS3" or service == "Device"
